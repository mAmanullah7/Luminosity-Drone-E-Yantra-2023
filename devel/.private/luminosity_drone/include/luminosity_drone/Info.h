// Generated by gencpp from file luminosity_drone/Info.msg
// DO NOT EDIT!


#ifndef LUMINOSITY_DRONE_MESSAGE_INFO_H
#define LUMINOSITY_DRONE_MESSAGE_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace luminosity_drone
{
template <class ContainerAllocator>
struct Info_
{
  typedef Info_<ContainerAllocator> Type;

  Info_()
    : sub_ms(0)
    , sub_mst(0)
    , sub_ls(0)  {
    }
  Info_(const ContainerAllocator& _alloc)
    : sub_ms(0)
    , sub_mst(0)
    , sub_ls(0)  {
  (void)_alloc;
    }



   typedef int32_t _sub_ms_type;
  _sub_ms_type sub_ms;

   typedef int32_t _sub_mst_type;
  _sub_mst_type sub_mst;

   typedef int32_t _sub_ls_type;
  _sub_ls_type sub_ls;





  typedef boost::shared_ptr< ::luminosity_drone::Info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::luminosity_drone::Info_<ContainerAllocator> const> ConstPtr;

}; // struct Info_

typedef ::luminosity_drone::Info_<std::allocator<void> > Info;

typedef boost::shared_ptr< ::luminosity_drone::Info > InfoPtr;
typedef boost::shared_ptr< ::luminosity_drone::Info const> InfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::luminosity_drone::Info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::luminosity_drone::Info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::luminosity_drone::Info_<ContainerAllocator1> & lhs, const ::luminosity_drone::Info_<ContainerAllocator2> & rhs)
{
  return lhs.sub_ms == rhs.sub_ms &&
    lhs.sub_mst == rhs.sub_mst &&
    lhs.sub_ls == rhs.sub_ls;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::luminosity_drone::Info_<ContainerAllocator1> & lhs, const ::luminosity_drone::Info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace luminosity_drone

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::luminosity_drone::Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::luminosity_drone::Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::luminosity_drone::Info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::luminosity_drone::Info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::luminosity_drone::Info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::luminosity_drone::Info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::luminosity_drone::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe8702018e11ba267a7b52a7fb524fc7";
  }

  static const char* value(const ::luminosity_drone::Info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe8702018e11ba26ULL;
  static const uint64_t static_value2 = 0x7a7b52a7fb524fc7ULL;
};

template<class ContainerAllocator>
struct DataType< ::luminosity_drone::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "luminosity_drone/Info";
  }

  static const char* value(const ::luminosity_drone::Info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::luminosity_drone::Info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 sub_ms\n"
"int32 sub_mst\n"
"int32 sub_ls\n"
;
  }

  static const char* value(const ::luminosity_drone::Info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::luminosity_drone::Info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sub_ms);
      stream.next(m.sub_mst);
      stream.next(m.sub_ls);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::luminosity_drone::Info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::luminosity_drone::Info_<ContainerAllocator>& v)
  {
    s << indent << "sub_ms: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sub_ms);
    s << indent << "sub_mst: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sub_mst);
    s << indent << "sub_ls: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sub_ls);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LUMINOSITY_DRONE_MESSAGE_INFO_H
