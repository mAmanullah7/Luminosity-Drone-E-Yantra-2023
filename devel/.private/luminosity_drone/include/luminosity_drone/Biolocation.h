// Generated by gencpp from file luminosity_drone/Biolocation.msg
// DO NOT EDIT!


#ifndef LUMINOSITY_DRONE_MESSAGE_BIOLOCATION_H
#define LUMINOSITY_DRONE_MESSAGE_BIOLOCATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace luminosity_drone
{
template <class ContainerAllocator>
struct Biolocation_
{
  typedef Biolocation_<ContainerAllocator> Type;

  Biolocation_()
    : organism_type()
    , whycon_x(0.0)
    , whycon_y(0.0)
    , whycon_z(0.0)  {
    }
  Biolocation_(const ContainerAllocator& _alloc)
    : organism_type(_alloc)
    , whycon_x(0.0)
    , whycon_y(0.0)
    , whycon_z(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _organism_type_type;
  _organism_type_type organism_type;

   typedef double _whycon_x_type;
  _whycon_x_type whycon_x;

   typedef double _whycon_y_type;
  _whycon_y_type whycon_y;

   typedef double _whycon_z_type;
  _whycon_z_type whycon_z;





  typedef boost::shared_ptr< ::luminosity_drone::Biolocation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::luminosity_drone::Biolocation_<ContainerAllocator> const> ConstPtr;

}; // struct Biolocation_

typedef ::luminosity_drone::Biolocation_<std::allocator<void> > Biolocation;

typedef boost::shared_ptr< ::luminosity_drone::Biolocation > BiolocationPtr;
typedef boost::shared_ptr< ::luminosity_drone::Biolocation const> BiolocationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::luminosity_drone::Biolocation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::luminosity_drone::Biolocation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::luminosity_drone::Biolocation_<ContainerAllocator1> & lhs, const ::luminosity_drone::Biolocation_<ContainerAllocator2> & rhs)
{
  return lhs.organism_type == rhs.organism_type &&
    lhs.whycon_x == rhs.whycon_x &&
    lhs.whycon_y == rhs.whycon_y &&
    lhs.whycon_z == rhs.whycon_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::luminosity_drone::Biolocation_<ContainerAllocator1> & lhs, const ::luminosity_drone::Biolocation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace luminosity_drone

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::luminosity_drone::Biolocation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::luminosity_drone::Biolocation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::luminosity_drone::Biolocation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::luminosity_drone::Biolocation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::luminosity_drone::Biolocation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::luminosity_drone::Biolocation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::luminosity_drone::Biolocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "101e3ee1346387705dd3316e6b7bd9bd";
  }

  static const char* value(const ::luminosity_drone::Biolocation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x101e3ee134638770ULL;
  static const uint64_t static_value2 = 0x5dd3316e6b7bd9bdULL;
};

template<class ContainerAllocator>
struct DataType< ::luminosity_drone::Biolocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "luminosity_drone/Biolocation";
  }

  static const char* value(const ::luminosity_drone::Biolocation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::luminosity_drone::Biolocation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string organism_type\n"
"float64 whycon_x\n"
"float64 whycon_y\n"
"float64 whycon_z\n"
;
  }

  static const char* value(const ::luminosity_drone::Biolocation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::luminosity_drone::Biolocation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.organism_type);
      stream.next(m.whycon_x);
      stream.next(m.whycon_y);
      stream.next(m.whycon_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Biolocation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::luminosity_drone::Biolocation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::luminosity_drone::Biolocation_<ContainerAllocator>& v)
  {
    s << indent << "organism_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.organism_type);
    s << indent << "whycon_x: ";
    Printer<double>::stream(s, indent + "  ", v.whycon_x);
    s << indent << "whycon_y: ";
    Printer<double>::stream(s, indent + "  ", v.whycon_y);
    s << indent << "whycon_z: ";
    Printer<double>::stream(s, indent + "  ", v.whycon_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LUMINOSITY_DRONE_MESSAGE_BIOLOCATION_H
